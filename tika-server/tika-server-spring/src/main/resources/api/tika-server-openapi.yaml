#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
openapi: 3.0.2
externalDocs:
  url: https://cwiki.apache.org/confluence/display/TIKA/TikaServer
  description: Find more info here
info:
  contact:
    email: dev@tika.apache.org
  description: The Tika server implements [JAX-RS](http://en.wikipedia.org/wiki/JAX-RS) (Java API for RESTful Web Services) to provide web services according to the Representational State Transfer (REST) architectural style. This facilitates a wide variety of operations and flexibility with regards to both client and server implementations. The officially supported Tika server implementation is packaged using the OpenAPI [jaxrs-cxf generator](https://openapi-generator.tech/docs/generators/jaxrs-cxf). This work was tracked through [TIKA-3082](https://issues.apache.org/jira/browse/TIKA-3082).
    <b>N.B.</b> the OpenAPI version always tracks the underlying Tika version to remove uncertainty about which version of Tika is running within the server.
  license:
    name: Apache v2
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Tika JAX-RS Server
  version: 4.0.0-SNAPSHOT
servers:
  - description: Local development server
    url: 'https://localhost:9998'
tags:
- name: Welcome
  description: Server welcome page and endpoint discovery
- name: Async Resource
  description: Asynchronous processing of documents using fetch-emit tuples
- name: Detector Resource
  description: Uses the default detector to identify MIME/media type
- name: Information Services
  description: Utility information such as available endpoints, defined mime types, available detectors, available parsers, etc.
- name: Language Resource
  description: Language identification
- name: Metadata Resource
  description: Metadata extraction
- name: XMP Metadata Resource
  description: XMP metadata extraction returning RDF/XML
- name: Pipes Resource
  description: Process documents through the Tika pipes framework
- name: Recursive Metadata and Content
  description: Recursive metadata and content extraction which results in JSONified list of metadata objects for the container document and all embedded documents
- name: Server Status
  description: Server status and version information
- name: Tika Resource
  description: Content extraction with various handlers and formats
- name: Translate Resource
  description: Flexible document translation with pluggable translators, translating from source language to destination
- name: Unpack Resource
  description: Provides extraction of embedded documents, returning a zip or tar of the raw bytes of the embedded files
- name: Eval Resource
  description: Text comparison and profiling using TikaEval framework
paths:
  /:
    get:
      description: Hitting the route of the server will give a basic report of all the endpoints defined in the server, what URL they have etc.
      operationId: get_endpoints
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing a list of endpoints.
          headers:
            Content-Type:
              schema:
                default: text/html
                type: string
              description: Content-Type served to client.
        '500':
          description: An error occurred processing the call.
      summary: GET a list of all server endpoints
      tags:
      - Information Services
  /async:
    post:
      description: POST a JSON request with fetch-emit tuples for asynchronous processing. The request must contain an emitter and a fetcherString key to fetch the inputStream. Optionally, it may contain metadata for pass-through.
      operationId: post_async
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tuples:
                  type: array
                  items:
                    type: object
                    properties:
                      fetchKey:
                        type: object
                        properties:
                          fetcherName:
                            type: string
                          fetchKey:
                            type: string
                      emitKey:
                        type: object
                        properties:
                          emitterName:
                            type: string
                          emitKey:
                            type: string
                      metadata:
                        type: object
                        additionalProperties:
                          type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  added:
                    type: integer
                    example: 1
          description: If successful, this operation returns HTTP status code 200 with status information.
        '429':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "throttled"
                  msg:
                    type: string
                  capacity:
                    type: integer
          description: Request throttled due to capacity limits.
        '400':
          description: Bad request - invalid fetcher or emitter.
        '500':
          description: An error occurred processing the call.
      summary: POST fetch-emit tuples for asynchronous processing
      tags:
      - Async Resource
  /detectors:
    get:
      description: The top level detector to be used, and any child detectors within it. Available as plain text, json or human readable HTML
      operationId: get_detectors
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultDetector'
          description: If successful, this operation returns HTTP status code 200, with the body the default detector information.
        '500':
          description: An error occurred processing the call.
      summary: GET information about the top level detector to be used, and any child detectors within it.
      tags:
      - Information Services
  /detect/stream:
    put:
      description: PUT a document and use the default detector to identify the MIME/media type. The caveat here is that providing a hint for the filename can increase the quality of detection. Default return is a string of the Media type name.
      operationId: put_stream
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                example: 'text/csv'
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body being a string for the detected mime type.
          headers:
            Content-Type:
              schema:
                example: text/plain
                default: text/plain
                type: string
              description: Content-type served to client.
        '500':
          description: An error occurred processing the call.
      summary: PUT a document and use the default detector to identify the MIME/media type.
      tags:
      - Detector Resource
  /language/stream:
    post:
      description: 'POST a UTF-8 text file to the LanguageIdentifier to identify its language. <b>NOTE</b>: This endpoint does not parse files.  It runs detection on a UTF-8 string.'
      operationId: post_language_stream
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                example: 'en'
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body being a string of the 2 character identified language.
        '500':
          description: An error occurred processing the call.
      summary: 'POST a UTF-8 text file to the LanguageIdentifier to identify its language.'
      tags:
      - Language Resource
    put:
      description: 'POST a UTF-8 text file to the LanguageIdentifier to identify its language. <b>NOTE</b>: This endpoint does not parse files.  It runs detection on a UTF-8 string.'
      operationId: put_language_stream
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                example: 'en'
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body being a string of the 2 character identified language.
        '500':
          description: An error occurred processing the call.
      summary: 'PUT a UTF-8 text file to the LanguageIdentifier to identify its language.'
      tags:
      - Language Resource
  /language/string:
    post:
      description: POST a text string to the LanguageIdentifier to identify its language.
      operationId: post_language_string
      requestBody:
        content:
          'text/plain':
            schema:
              type: string
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                example: 'en'
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body being a string of the 2 character identified language.
        '500':
          description: An error occurred processing the call.
      summary: POST a text string to the LanguageIdentifier to identify its language.
      tags:
      - Language Resource
    put:
      description: PUT a text string to the LanguageIdentifier to identify its language.
      operationId: put_language_string
      requestBody:
        content:
          'text/plain':
            schema:
              type: string
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                example: 'en'
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body being a string of the 2 character identified language.
        '500':
          description: An error occurred processing the call.
      summary: PUT a text string to the LanguageIdentifier to identify its language.
      tags:
      - Language Resource
  /meta:
    put:
      description: PUT a document to the metadata extraction resource.
      operationId: put_document_meta
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing all of the extracted metadata for the uploaded data.
        '500':
          description: An error occurred processing the call.
      summary: PUT a document to the metadata extraction resource.
      tags:
      - Metadata Resource
  /meta/{metadata_key}:
    put:
      description: PUT a document to the metadata extraction resource and get a specific metadata key's value.
      parameters:
      - description: The metadata key for which you wish to obtain it's value
        explode: false
        in: path
        name: metadata_key
        required: true
        schema:
          example: 'Content-Type'
          type: string
        style: simple
      operationId: put_document_get_meta_value
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
          description: If successful, this operation returns HTTP status code 200, with the body containing the extracted metadata value for the given key.
        '500':
          description: An error occurred processing the call.
      summary: PUT a document to the metadata extraction resource and get a specific metadata key's value.
      tags:
      - Metadata Resource
  /meta/form:
    post:
      description: POST a document via multipart/form-data to the metadata extraction resource.
      operationId: post_document_meta_form
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
            text/csv:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing all of the extracted metadata.
        '500':
          description: An error occurred processing the call.
      summary: POST a document via form to the metadata extraction resource.
      tags:
      - Metadata Resource
  /mime-types/{type}/{subtype}:
    get:
      description: Get detailed information about a specific MIME type.
      parameters:
      - description: The main type part of the MIME type (e.g., 'text' in 'text/plain')
        explode: false
        in: path
        name: type
        required: true
        schema:
          example: 'text'
          type: string
        style: simple
      - description: The subtype part of the MIME type (e.g., 'plain' in 'text/plain')
        explode: false
        in: path
        name: subtype
        required: true
        schema:
          example: 'plain'
          type: string
        style: simple
      operationId: get_mimetype_details
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  alias:
                    type: array
                    items:
                      type: string
                  supertype:
                    type: string
                  parser:
                    type: string
                  description:
                    type: string
                  extensions:
                    type: array
                    items:
                      type: string
            text/html:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with detailed information about the MIME type.
        '404':
          description: MIME type not found.
        '500':
          description: An error occurred processing the call.
      summary: GET detailed information about a specific MIME type.
      tags:
      - Information Services
  /mime-types:
    get:
      description: Mime types, their aliases, their supertype, and the parser. Available as plain text, json or human readable HTML.
      operationId: get_mimetypes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MimeTypes'
          description: If successful, this operation returns HTTP status code 200, with the body containing Mime types, their aliases, their supertype, and the parser.
        '500':
          description: An error occurred processing the call.
      summary: GET all mime types, their aliases, their supertype, and the parser.
      tags:
      - Information Services
  /parsers:
    get:
      description: Lists all of the parsers currently available.
      operationId: get_parsers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parsers'
          description: If successful, this operation returns HTTP status code 200, with the body containing a list of parser objects.
        '500':
          description: An error occurred processing the call.
      summary: GET all of the parsers currently available.
      tags:
      - Information Services
  /pipes:
    post:
      description: POST a JSON fetch-emit tuple for processing through the Tika pipes framework. The request must contain an emitter and a fetcherString key to fetch the inputStream. Optionally, it may contain metadata and handler config.
      operationId: post_pipes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fetchKey:
                  type: object
                  properties:
                    fetcherName:
                      type: string
                    fetchKey:
                      type: string
                emitKey:
                  type: object
                  properties:
                    emitterName:
                      type: string
                    emitKey:
                      type: string
                metadata:
                  type: object
                  additionalProperties:
                    type: string
                parseContext:
                  type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  parse_exception:
                    type: string
                  emitted:
                    type: string
                  message:
                    type: string
                  parse_error:
                    type: string
          description: If successful, this operation returns HTTP status code 200 with processing status information.
        '400':
          description: Bad request - invalid fetcher or emitter.
        '500':
          description: An error occurred processing the call.
      summary: POST a fetch-emit tuple for pipes processing
      tags:
      - Pipes Resource
  /parsers/details:
    get:
      description: List all the available parsers, along with what mimetypes they support.
      operationId: get_parsers_details
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedParsers'
          description: If successful, this operation returns HTTP status code 200, with the body containing a list of parser object details including the mime types handled by each parser.
        '500':
          description: An error occurred processing the call.
      summary: GET all the available parsers, along with what mimetypes they support.
      tags:
      - Information Services
  /rmeta:
    put:
        description: 'Returns an InputStream that can be deserialized as a list of {@link Metadata} objects. The first in the list represents the main document, and the rest represent metadata for the embedded objects. This works recursively through all descendants of the main document, not just the immediate children. The extracted text content is stored with the key {@link RecursiveParserWrapper#TIKA_CONTENT}.'
        operationId: put_rmeta
        requestBody:
          content:
            '*/*':
              schema:
                type: string
                format: binary
          required: true
        responses:
          '200':
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Metadata'
            description: 'Returns a JSONified list of Metadata objects for the container document and all embedded documents.'
          '500':
            description: An error occurred processing the call.
        summary: 'Returns a JSONified list of Metadata objects for the container document and all embedded documents.'
        tags:
        - Recursive Metadata and Content
  /rmeta/{handler}:
    put:
      description: 'Returns an InputStream that can be deserialized as a list of Metadata objects with a specific handler type (xml, text, html, ignore).'
      parameters:
      - description: Handler type for content (xml, text, html, ignore)
        explode: false
        in: path
        name: handler
        required: true
        schema:
          example: 'xml'
          type: string
          enum: [xml, text, html, ignore]
        style: simple
      operationId: put_rmeta_handler
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metadata'
          description: 'Returns a JSONified list of Metadata objects with specified handler.'
        '500':
          description: An error occurred processing the call.
      summary: 'Returns recursive metadata with specified handler type.'
      tags:
      - Recursive Metadata and Content
  /rmeta/form:
    post:
      description: 'POST a document via multipart/form-data for recursive metadata extraction.'
      operationId: post_rmeta_form
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metadata'
          description: 'Returns a JSONified list of Metadata objects for the container document and all embedded documents.'
        '500':
          description: An error occurred processing the call.
      summary: 'POST form for recursive metadata extraction.'
      tags:
      - Recursive Metadata and Content
  /rmeta/form/{handler}:
    post:
      description: 'POST a document via multipart/form-data for recursive metadata extraction with specified handler.'
      parameters:
      - description: Handler type for content (xml, text, html, ignore)
        explode: false
        in: path
        name: handler
        required: true
        schema:
          example: 'xml'
          type: string
          enum: [xml, text, html, ignore]
        style: simple
      operationId: post_rmeta_form_handler
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metadata'
          description: 'Returns a JSONified list of Metadata objects with specified handler.'
        '500':
          description: An error occurred processing the call.
      summary: 'POST form for recursive metadata extraction with handler.'
      tags:
      - Recursive Metadata and Content
  /status:
    get:
      description: GET the current server status including server ID, status, files processed, and restart count.
      operationId: get_status
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  server_id:
                    type: string
                  status:
                    type: string
                  millis_since_last_parse_started:
                    type: integer
                    format: int64
                  files_processed:
                    type: integer
                    format: int64
                  num_restarts:
                    type: integer
                    format: int32
          description: If successful, this operation returns HTTP status code 200 with server status information.
        '500':
          description: An error occurred processing the call.
      summary: GET the current server status
      tags:
      - Server Status
  /tika:
    get:
        description: 'HTTP GET returns a greeting stating the server is up. Followed by a PUT request to extract text.'
        operationId: get_tika
        responses:
          '200':
            content:
              text/plain:
                schema:
                  example: 'This is Tika Server (Apache Tika 4.0.0-SNAPSHOT). Please PUT'
                  type: string
            description: If successful, this operation returns HTTP status code 200, with a greeting to indicate the server is up and you may PUT a file.
            headers:
              Content-Type:
                schema:
                  example: text/plain
                  default: text/plain
                  type: string
                description: Content-type served to client.
          '500':
            description: An error occurred processing the call.
        summary: GET returns a greeting stating the server is up.
        tags:
        - Tika Resource
    put:
        description: 'HTTP PUTs a document to the /tika service and you get back the extracted text.'
        operationId: put_tika
        requestBody:
          content:
            '*/*':
              schema:
                type: string
                format: binary
          required: true
        responses:
          '200':
            content:
              text/plain:
                schema:
                  type: string
            description: If successful, this operation returns HTTP status code 200, with the extracted text.
            headers:
              Content-Type:
                schema:
                  example: text/plain
                  default: text/plain
                  type: string
                description: Content-type served to client.
          '500':
            description: An error occurred processing the call.
        summary: PUT document to extract text.
        tags:
        - Tika Resource
  /tika/form:
    post:
      description: 'POST a document via multipart/form-data to the /tika service for text extraction.'
      operationId: post_tika_form
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
          description: If successful, returns the extracted content in the requested format.
        '500':
          description: An error occurred processing the call.
      summary: 'POST form for text extraction.'
      tags:
      - Tika Resource
  /tika/main:
    put:
      description: 'PUT a document and use Boilerpipe to extract the main content (equivalent to text-main in tika-app).'
      operationId: put_tika_main
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the main extracted text.
        '500':
          description: An error occurred processing the call.
      summary: 'PUT document to extract main content using Boilerpipe.'
      tags:
      - Tika Resource
  /tika/form/main:
    post:
      description: 'POST a document via multipart/form-data to extract main content using Boilerpipe.'
      operationId: post_tika_form_main
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: If successful, returns the main extracted text.
        '500':
          description: An error occurred processing the call.
      summary: 'POST form for main content extraction.'
      tags:
      - Tika Resource
  /tika/{handler}:
    put:
      description: 'PUT a document with a specific content handler type.'
      parameters:
      - description: Handler type for content (xml, text, html, ignore)
        explode: false
        in: path
        name: handler
        required: true
        schema:
          example: 'xml'
          type: string
          enum: [xml, text, html, ignore]
        style: simple
      operationId: put_tika_handler
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
          description: If successful, returns the processed content with metadata.
        '500':
          description: An error occurred processing the call.
      summary: 'PUT document with specific handler type.'
      tags:
      - Tika Resource
  /translate/all/{translator}/{src}/{dest}:
    post:
      description: 'POST a document and translates from the *src* language to the *dest*. <b>NOTE</b>:  *translator* should be a fully qualified Tika class name (with package), *src* and *dest* should be the 2 character short code for the source language and dest language respectively.'
      parameters:
      - description: The fully qualified class name of the translator
        explode: false
        in: path
        name: translator
        required: true
        schema:
          example: 'org.apache.tika.language.translate.GoogleTranslator'
          type: string
        style: simple
      - description: The 2 character short code for the source language
        explode: false
        in: path
        name: src
        required: true
        schema:
          example: 'en'
          type: string
        style: simple
      - description: The 2 character short code for the destination language
        explode: false
        in: path
        name: dest
        required: true
        schema:
          example: 'es'
          type: string
        style: simple
      operationId: post_translate_all_translator_src_dest
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the translated string, else it will return the original string back.
        '500':
          description: An error occurred processing the call.
      summary: 'POST a document and translates from the *src* language to the *dest*'
      tags:
      - Translate Resource
    put:
        description: 'PUT a document and translates from the *src* language to the *dest*. <b>NOTE</b>:  *translator* should be a fully qualified Tika class name (with package), *src* and *dest* should be the 2 character short code for the source language and dest language respectively.'
        parameters:
        - description: The fully qualified class name of the translator
          explode: false
          in: path
          name: translator
          required: true
          schema:
            example: 'org.apache.tika.language.translate.GoogleTranslator'
            type: string
          style: simple
        - description: The 2 character short code for the source language
          explode: false
          in: path
          name: src
          required: true
          schema:
            example: 'en'
            type: string
          style: simple
        - description: The 2 character short code for the destination language
          explode: false
          in: path
          name: dest
          required: true
          schema:
            example: 'es'
            type: string
          style: simple
        operationId: put_translate_all_translator_src_dest
        requestBody:
          content:
            '*/*':
              schema:
                type: string
                format: binary
          required: true
        responses:
          '200':
            content:
              text/plain:
                schema:
                  type: string
            description: If successful, this operation returns HTTP status code 200, with the translated string, else it will return the original string back.
          '500':
            description: An error occurred processing the call.
        summary: 'PUT a document and translates from the *src* language to the *dest*'
        tags:
        - Translate Resource
  /translate/all/{translator}/{dest}:
    post:
      description: 'POST a document and auto-detects the *src* language and translates to *dest*. <b>NOTE</b>:  *translator* should be a fully qualified Tika class name (with package) and *dest* should be the 2 character short code for the destination language.'
      parameters:
      - description: The fully qualified class name of the translator
        explode: false
        in: path
        name: translator
        required: true
        schema:
          example: 'org.apache.tika.language.translate.GoogleTranslator'
          type: string
        style: simple
      - description: The 2 character short code for the destination language
        explode: false
        in: path
        name: dest
        required: true
        schema:
          example: 'es'
          type: string
        style: simple
      operationId: post_auto_translate
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the translated string, else it will return the original string back.
        '500':
          description: An error occurred processing the call.
      summary: 'POST a document and auto-detects the *src* language and translates to *dest*'
      tags:
      - Translate Resource
    put:
      description: 'PUT a document and auto-detects the *src* language and translates to *dest*. <b>NOTE</b>:  *translator* should be a fully qualified Tika class name (with package) and *dest* should be the 2 character short code for the destination language.'
      parameters:
      - description: The fully qualified class name of the translator
        explode: false
        in: path
        name: translator
        required: true
        schema:
          example: 'org.apache.tika.language.translate.GoogleTranslator'
          type: string
        style: simple
      - description: The 2 character short code for the destination language
        explode: false
        in: path
        name: dest
        required: true
        schema:
          example: 'es'
          type: string
        style: simple
      operationId: put_auto_translate
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the translated string, else it will return the original string back.
        '500':
          description: An error occurred processing the call.
      summary: 'PUT a document and auto-detects the *src* language and translates to *dest*'
      tags:
      - Translate Resource
  /unpack:
    put:
        description: 'PUT an embedded document and unpack it to get back the raw bytes of embedded files. Default return type is ZIP <b>NOTE</b>: this does not operate recursively'
        operationId: put_unpack
        requestBody:
          content:
            '*/*':
              schema:
                type: string
                format: binary
          required: true
        responses:
          '200':
            content:
              application/zip:
                schema:
                  type: string
                  format: binary
              application/x-tar:
                schema:
                  type: string
                  format: binary
            description: If successful, this operation returns HTTP status code 200, with a zip file containing the raw bytes of embedded files.
          '204':
            description: No embedded files found to unpack.
          '500':
            description: An error occurred processing the call.
        summary: PUT an embedded document and unpack it to get back the raw bytes of embedded files.
        tags:
        - Unpack Resource
  /unpack/all:
    put:
      description: 'PUT an embedded document and unpack all content including main document text and metadata. Returns a zip/tar with embedded files, main text, and metadata CSV.'
      operationId: put_unpack_all
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/zip:
              schema:
                type: string
                format: binary
            application/x-tar:
              schema:
                type: string
                format: binary
          description: If successful, this operation returns HTTP status code 200, with a zip file containing embedded files, main text, and metadata.
        '500':
          description: An error occurred processing the call.
      summary: PUT document and unpack all content including main text and metadata.
      tags:
      - Unpack Resource
  /version:
    get:
      description: GET the current Tika version information.
      operationId: get_version
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
                example: 'Apache Tika 4.0.0-SNAPSHOT'
          description: If successful, this operation returns HTTP status code 200 with version information.
        '500':
          description: An error occurred processing the call.
      summary: GET the current Tika version
      tags:
      - Translate Resource
  /xmpmeta:
    put:
      description: PUT a document to the XMP metadata extraction resource and get metadata in RDF/XML format.
      operationId: put_document_xmpmeta
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/rdf+xml:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing all of the extracted metadata in RDF/XML format.
        '500':
          description: An error occurred processing the call.
      summary: PUT a document to extract XMP metadata in RDF/XML format.
      tags:
      - XMP Metadata Resource
  /xmpmeta/{metadata_key}:
    put:
      description: PUT a document to the XMP metadata extraction resource and get a specific metadata key's value in RDF/XML format.
      parameters:
      - description: The metadata key for which you wish to obtain its value
        explode: false
        in: path
        name: metadata_key
        required: true
        schema:
          example: 'dc:creator'
          type: string
        style: simple
      operationId: put_document_get_xmpmeta_value
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          content:
            application/rdf+xml:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing the extracted metadata value for the given key in RDF/XML format.
        '404':
          description: The specified metadata key was not found.
        '500':
          description: An error occurred processing the call.
      summary: PUT a document to the XMP metadata extraction resource and get a specific metadata key's value in RDF/XML format.
      tags:
      - XMP Metadata Resource
  /xmpmeta/form:
    post:
      description: POST a document via multipart/form-data to the XMP metadata extraction resource and get metadata in RDF/XML format.
      operationId: post_document_xmpmeta_form
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          content:
            application/rdf+xml:
              schema:
                type: string
          description: If successful, this operation returns HTTP status code 200, with the body containing all of the extracted metadata in RDF/XML format.
        '500':
          description: An error occurred processing the call.
      summary: POST a document via form to the XMP metadata extraction resource.
      tags:
      - XMP Metadata Resource
  /eval/compare:
    put:
      description: PUT two text strings to compare them and get similarity metrics including Dice coefficient and overlap statistics. The request must contain textA, textB, and id fields.
      operationId: put_eval_compare
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Identifier for the comparison task
                  example: "comparison-123"
                textA:
                  type: string
                  description: First text to compare
                  example: "This is the first document text."
                textB:
                  type: string
                  description: Second text to compare
                  example: "This is the second document text."
                timeoutMillis:
                  type: integer
                  format: int64
                  description: Optional timeout in milliseconds (default 60000)
                  example: 60000
              required:
                - id
                - textA
                - textB
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  "tika-eval:dice":
                    type: number
                    format: float
                    description: Dice coefficient similarity measure
                  "tika-eval:overlap":
                    type: number
                    format: float
                    description: Overlap similarity measure
                  "tika-eval:numTokensA":
                    type: integer
                    description: Number of tokens in text A
                  "tika-eval:numTokensB":
                    type: integer
                    description: Number of tokens in text B
                  "tika-eval:numUniqueTokensA":
                    type: integer
                    description: Number of unique tokens in text A
                  "tika-eval:numUniqueTokensB":
                    type: integer
                    description: Number of unique tokens in text B
                  "tika-eval:numAlphaTokensA":
                    type: integer
                    description: Number of alphabetic tokens in text A
                  "tika-eval:numAlphaTokensB":
                    type: integer
                    description: Number of alphabetic tokens in text B
                  "tika-eval:languageA":
                    type: string
                    description: Detected language for text A
                  "tika-eval:languageB":
                    type: string
                    description: Detected language for text B
          description: If successful, this operation returns HTTP status code 200 with comparison statistics and similarity metrics.
        '500':
          description: An error occurred processing the call.
      summary: PUT two texts to compare and get similarity metrics
      tags:
      - Eval Resource
  /eval/profile:
    put:
      description: PUT a text string to analyze and get detailed profiling statistics including token counts, language detection, and vocabulary analysis.
      operationId: put_eval_profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Identifier for the profiling task
                  example: "profile-123"
                text:
                  type: string
                  description: Text to analyze and profile
                  example: "This is a sample document for text analysis."
                timeoutMillis:
                  type: integer
                  format: int64
                  description: Optional timeout in milliseconds (default 60000)
                  example: 60000
              required:
                - id
                - text
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  "tika-eval:numTokens":
                    type: integer
                    description: Total number of tokens
                  "tika-eval:numUniqueTokens":
                    type: integer
                    description: Number of unique tokens
                  "tika-eval:numAlphaTokens":
                    type: integer
                    description: Number of alphabetic tokens
                  "tika-eval:numUniqueAlphaTokens":
                    type: integer
                    description: Number of unique alphabetic tokens
                  "tika-eval:outOfVocabulary":
                    type: number
                    format: float
                    description: Out-of-vocabulary ratio (-1.0 if no alphabetic tokens)
                  "tika-eval:language":
                    type: string
                    description: Detected language code
                    example: "en"
                  "tika-eval:languageConfidence":
                    type: number
                    format: float
                    description: Language detection confidence score
          description: If successful, this operation returns HTTP status code 200 with detailed text analysis statistics.
        '500':
          description: An error occurred processing the call.
      summary: PUT a text to analyze and get profiling statistics
      tags:
      - Eval Resource
components:
  schemas:
    Composite:
      description: "Whether the resource (parser, detector, etc.) composes a result from several other resources."
      example: true
      type: boolean
    Decorated:
      description: "Whether the resource (parser, detector, etc.) decorates a data stream with custom pre-, post- or error processing functionality."
      example: true
      type: boolean
    DefaultDetector:
      description: "The entire Tika detector collection."
      type: object
      properties:
        children:
          description: "An array of Tika detector implementations."
          type: array
          items:
            type: object
            properties:
              composite:
                $ref: '#/components/schemas/Composite'
              name:
                $ref: '#/components/schemas/Name'
        composite:
            $ref: '#/components/schemas/Composite'
        name:
          $ref: '#/components/schemas/Name'
    DetailedParser:
      description: "Detailed metadata descriptor for an individual parser."
      type: object
      properties:
        composite:
          $ref: '#/components/schemas/Composite'
        name:
          $ref: '#/components/schemas/Name'
        supportedTypes:
          $ref: '#/components/schemas/SupportedTypes'
        decorated:
          $ref: '#/components/schemas/Decorated'
    DetailedParsers:
      description: "The entire detailed Tika parser collection including org.apache.tika.parser.DefaultParser"
      type: object
      properties:
        children:
          description: "An array of detailed Tika parser implementations excluding org.apache.tika.parser.DefaultParser"
          type: array
          items:
            $ref: '#/components/schemas/DetailedParser'
        composite:
          $ref: '#/components/schemas/Composite'
        name:
          $ref: '#/components/schemas/Name'
        decorated:
          $ref: '#/components/schemas/Decorated'
    Metadata:
      description: "The typical Tika multi-valued metadata key-value map."
      type: object
      additionalProperties:
        type: string
    MimeTypes:
      description: "The entire detailed Tika mimetype collection"
      type: object
      additionalProperties: true
    Name:
      description: "The fully qualified resource name."
      example: "org.apache.tika.parser.apple.AppleSingleFileParser"
      type: string
    Parser:
      description: "Metadata descriptor for an individual parser."
      type: object
      properties:
        composite:
          $ref: '#/components/schemas/Composite'
        name:
          $ref: '#/components/schemas/Name'
        decorated:
          $ref: '#/components/schemas/Decorated'
    Parsers:
      description: "The entire Tika parser collection including org.apache.tika.parser.DefaultParser"
      type: object
      properties:
        children:
          description: "An array of Tika parser implementations excluding org.apache.tika.parser.DefaultParser"
          type: array
          items:
            $ref: '#/components/schemas/Parser'
        composite:
          $ref: '#/components/schemas/Composite'
        name:
          $ref: '#/components/schemas/Name'
        decorated:
          $ref: '#/components/schemas/Decorated'
    SupportedTypes:
      description: "One or more media types supported by any given Tika parsers."
      type: array
      items:
        type: string

