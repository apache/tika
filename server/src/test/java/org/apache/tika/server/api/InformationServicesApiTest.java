/**
 * Tika JAX-RS Server
 * The Tika server implements [JAX-RS](http://en.wikipedia.org/wiki/JAX-RS) (Java API for RESTful Web Services) to provide web services according to the Representational State Transfer (REST) architectural style. This facilitates a wide varity oif operations and flexibility with regards to both client and server implementations. The officially supported Tika server implementation is packaged using the OpenAPI [jaxrs-cxf generator](https://openapi-generator.tech/docs/generators/jaxrs-cxf]. This work was tracked through [TIKA-3082](https://issues.apache.org/jira/browse/TIKA-3082). <b>N.B.</b> the OpenAPI version always tracks the underlying Tika version to remove uncertainty about which version of Tika is running within the server.
 *
 * The version of the OpenAPI document: 2.0.0-SNAPSHOT
 * Contact: dev@tika.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.apache.tika.server.api;

import java.util.Map;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.tika.server.api.InformationServicesApi;
import org.apache.tika.server.model.DefaultDetector;
import org.apache.tika.server.model.DetailedParsers;
import org.apache.tika.server.model.Parsers;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Tika JAX-RS Server
 *
 * <p>The Tika server implements [JAX-RS](http://en.wikipedia.org/wiki/JAX-RS) (Java API for RESTful Web Services) to provide web services according to the Representational State Transfer (REST) architectural style. This facilitates a wide varity oif operations and flexibility with regards to both client and server implementations. The officially supported Tika server implementation is packaged using the OpenAPI [jaxrs-cxf generator](https://openapi-generator.tech/docs/generators/jaxrs-cxf]. This work was tracked through [TIKA-3082](https://issues.apache.org/jira/browse/TIKA-3082). <b>N.B.</b> the OpenAPI version always tracks the underlying Tika version to remove uncertainty about which version of Tika is running within the server.
 *
 * API tests for InformationServicesApi 
 */
public class InformationServicesApiTest {


    private InformationServicesApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://localhost:9998", InformationServicesApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * GET information about the top level detector to be used, and any child detectors within it.
     *
     * The top level detector to be used, and any child detectors within it. Available as plain text, json or human readable HTML
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetectorsTest() {
        //DefaultDetector response = api.getDetectors();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * GET a list of all server endpoints
     *
     * Hitting the route of the server will give a basic report of all the endpoints defined in the server, what URL they have etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndpointsTest() {
        //String response = api.getEndpoints();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * GET all mime types, their aliases, their supertype, and the parser.
     *
     * Mime types, their aliases, their supertype, and the parser. Available as plain text, json or human readable HTML.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMimetypesTest() {
        //Map<String, Object> response = api.getMimetypes();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * GET all of the parsers currently available.
     *
     * Lists all of the parsers currently available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParsersTest() {
        //Parsers response = api.getParsers();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * GET all the available parsers, along with what mimetypes they support.
     *
     * List all the available parsers, along with what mimetypes they support.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParsersDetailsTest() {
        //DetailedParsers response = api.getParsersDetails();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
